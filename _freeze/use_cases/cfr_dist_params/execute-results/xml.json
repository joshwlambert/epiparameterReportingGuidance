{
  "hash": "5a9baaa4536b3736916480c19a988329",
  "result": {
    "engine": "knitr",
    "markdown": "**Use case: Ambiguous reporting of onset-to-death delay distribution and erroneous CFR estimates**\n\nIn a scenario in which the case fatality risk (CFR) needs to be calculated for an ongoing, growing disease outbreak an onset-to-death delay distribution is required to calculate an unbiased CFR estimate, due to some individuals being infected but theiry outcome (i.e recovery or death) is unknown @nishiuraEarlyEpidemiologicalAssessment2009.\n\nA line list of the current outbreak is available, but no estiates of the onset-to-death delay are available for this outbreak and there is not enough case data to reliably estimate it from the line list. Therefore a previously inferred onset-to-death distribution is searched and extracted from the literature for the same pathogen from a past outbreak.\n\nThe paper reporting the onset-to-death states:\n\n> \"... the average duration between the time when symptoms first appeared and death of the patients was estimated. The mean onset-to-death delay was of 14.5 days, with a standard deviation of 6.7.\"\n\nThe ambiguous reporting of the esimates means the onset-to-death delay can be (mis)interpreted in several ways. The paper is reporting the summary statistics mean and standard deviation for a lognormal distribution they fitted to the data. The estimates could be misinterpreted as meanlog and sdlog do the lognormal distribution, or could be misinterpreted as the summary statistics of the raw data (i.e. sample statistics). The CFR calculation for an unbiased estimate requires a parametric probability density/mass function. Therefore, given the ambiguity we demonstrate the correct interpretation and three misinterpretations of the reported onset-to-death and show how the CFR varies as a result. We use the {simulist} and {cfr} R packages to simulate line list data and calculate the CFR, respectively @lambertSimulistSimulateDisease2024 and @gupteCfrEstimateDisease2024.\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\n# Use case for reporting guidance paper #2- Mean of the sample reported\n# ambiguously so it's confused with the mean of the lognormal distribution\nlibrary(simulist)\nlibrary(epiparameter)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\nlibrary(incidence2)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: grates\n\nAttaching package: 'grates'\n\nThe following objects are masked from 'package:lubridate':\n\n    epiweek, isoweek, year\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\nlibrary(cfr)\nlibrary(tidyr)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\n# Step 1: Simulating data for the use case with o-d lognormal and CFR of 30%\ncontact_distribution <- epiparameter(\n  disease = \"COVID-19\",\n  epi_dist = \"contact distribution\",\n  prob_distribution = \"pois\",\n  prob_distribution_params = c(mean = 3)\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nCitation cannot be created as author, year, journal or title is missing\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\nip_COVID <- epiparameter(\n  disease = \"COVID-19\",\n  epi_dist = \"infectious period\",\n  prob_distribution = \"gamma\",\n  prob_distribution_params = c(shape = 3, scale = 3)\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nCitation cannot be created as author, year, journal or title is missing\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\no_d_COVID <- epiparameter_db(\n  disease = \"covid-19\",\n  epi_dist = \"onset to death\",\n  single_epiparameter = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nUsing Linton N, Kobayashi T, Yang Y, Hayashi K, Akhmetzhanov A, Jung S, Yuan\nB, Kinoshita R, Nishiura H (2020). \"Incubation Period and Other\nEpidemiological Characteristics of 2019 Novel Coronavirus Infections\nwith Right Truncation: A Statistical Analysis of Publicly Available\nCase Data.\" _Journal of Clinical Medicine_. doi:10.3390/jcm9020538\n<https://doi.org/10.3390/jcm9020538>.. \nTo retrieve the citation use the 'get_citation' function\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n#| message: false\nset.seed(123)\nlinelist_covid <- sim_linelist(\n  contact_distribution = contact_distribution, \n  infectious_period = ip_COVID,\n  prob_infect = 0.7,\n  onset_to_hosp = NULL,\n  hosp_risk = NULL,\n  non_hosp_death_risk = 0.3,\n  onset_to_death = o_d_COVID,\n  outbreak_size = c(1000, 2000)\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Number of cases exceeds maximum outbreak size. \nReturning data early with 2272 cases and 3246 total contacts (including cases).\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n# STEP 2: Aggregation\nlinelist_covid <- linelist_covid %>%\n  tidyr::pivot_wider(\n    names_from = outcome,\n    values_from = date_outcome\n  ) %>%\n  dplyr::rename(\n    date_death = died,\n    date_recovery = recovered\n  )\n\nincidence_COVID <- incidence2::incidence(\n  linelist_covid, \n  date_index = c(\"date_onset\", \"date_death\"), \n  interval = 1L\n)\n\nincidence_COVID$date_index <- as.Date(incidence_COVID$date_index)\ncovid_inc_cfr <- cfr::prepare_data(\n  incidence_COVID, \n  cases_variable = \"date_onset\", \n  deaths_variable = \"date_death\"\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nNAs in cases and deaths are being replaced with 0s: Set `fill_NA = FALSE` to prevent this.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\nggplot2::ggplot(\n  data = covid_inc_cfr, \n  mapping = ggplot2::aes(x = date)\n) + \n  ggplot2::geom_point(\n    mapping = ggplot2::aes(y = cases), \n    colour = \"blue\"\n  ) +\n  ggplot2::geom_point(\n    mapping = ggplot2::aes(y = deaths), \n    colour = \"red\") + \n  ggplot2::theme_bw() + \n  ggplot2::scale_x_date(date_breaks = \"7 days\")\n```\n\n::: {.cell-output-display}\n![](cfr_dist_params_files/figure-jats/unnamed-chunk-3-1.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n# STEP 3: Truncating data\n# Real-time point at 2023-01-09\n\nreal_time <- \"2023-01-27\"\nincidence_rt_covid <- covid_inc_cfr[covid_inc_cfr$date <= real_time,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n# STEP 4: Converting parameters\ntrue_dist_params <- get_parameters(o_d_COVID)\ntrue_dist_summary_stats <- convert_params_to_summary_stats(\"lnorm\", meanlog = true_dist_params[[\"meanlog\"]], sdlog = true_dist_params[[\"sdlog\"]])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| echo: false\n# STEP 5: Problem statement\n\n# We want to estimate the delay-adjusted CFR on our own outbreak data, and for this\n# we look at the available literature where we find a publication that reports the delay\n# from disease onset to death as follows:\n# \"... the average duration between the time when symptoms first appeared and\n# death of the patients was estimated. The mean onset-death delay was of 14.5 days,\n# with a standard deviation of 6.7\"\n\n\n# 14.5 and 6.7 are really distribution summary stats\n\n# TRUE CFR\n\ntrue_cfr <- cfr::cfr_static(\n  incidence_rt_covid, \n  delay_density = function(x) {\n    dlnorm(\n      x, \n      meanlog = true_dist_params[[\"meanlog\"]], \n      sdlog = true_dist_params[[\"sdlog\"]]\n    )\n  }\n)\n\n# a) We think they are meanlog and sdlog\ncrf_assumed_params <- cfr::cfr_static(\n  incidence_rt_covid, \n  delay_density = function(x) {\n    dlnorm(\n      x, \n      meanlog = true_dist_summary_stats[[\"mean\"]], \n      sdlog = true_dist_summary_stats[[\"sd\"]]\n    )\n  }\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nTotal deaths = 22 and expected outcomes = 14 so setting expected outcomes = NA. If we were to assume\n        total deaths = expected outcomes, it would produce an estimate of 1.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| echo: false\n# b) We think they are sample statistics\n# b.1) Lognormal to randomly generate sample and lognormal fitted distribution\nlnorm_sample <- rlnorm(\n  n = 500, \n  meanlog = true_dist_params[[\"meanlog\"]], \n  sdlog = true_dist_params[[\"sdlog\"]]\n)\n\nlnorm_fit <- fitdistrplus::fitdist(data = lnorm_sample, distr = \"lnorm\")\n\ncfr_sample_lnorm <- cfr::cfr_static(\n  incidence_rt_covid, \n  delay_density = function(x) {\n    dlnorm(\n      x, \n      meanlog = lnorm_fit$estimate[[\"meanlog\"]], \n      sdlog = lnorm_fit$estimate[[\"sdlog\"]]\n    )\n  }\n)\n\n# b.2) Gamma and gamma\ngamma_parameters <- convert_summary_stats_to_params(\n  \"gamma\",\n  mean = true_dist_summary_stats[[\"mean\"]], \n  sd = true_dist_summary_stats[[\"sd\"]]\n)\n\ngamma_sample <- rgamma(\n  n = 500, \n  shape = gamma_parameters$shape, \n  scale = gamma_parameters$scale\n)\n\ngamma_fit <- fitdistrplus::fitdist(data = gamma_sample, distr = \"gamma\")\n\ncfr_sample_gamma <- cfr::cfr_static(\n  incidence_rt_covid, \n  delay_density = function(x) {\n    dgamma(\n      x, \n      shape = gamma_fit$estimate[[\"shape\"]], \n      rate = gamma_fit$estimate[[\"rate\"]]\n    )\n  }\n)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\nThe correct interpretation can analytically convert the mean and standard deviation to the lognormal distribution parameters ($\\mu$ = 2.86, $\\sigma$ = 0.53) and parameterise the onset-to-death, resulting in a CFR of 0.3042, or 30\\.42%. Misinterpreting the estimates to be the lognormal parameters results in an overestimated CFR of NA. Assuming that the reported estimates are sample summary statistics, the distribution can be assumed, here we test the assumption that it is a lognormal (correct assumption) and a gamma distribution (incorrect assumption). The assumed parametric distribution form can be used to simulate a sample and the same distribution can be fit to that sample to estimate the parameters. In the case of assuming a lognormal distribution the CFR is estimated as 0.2681, whereas assuming a gamma distribution results in a CFR of 0.2426. The estimated CFR is biased in both cases but more so when the distribution is assumed incorrectly. \n",
    "supporting": [
      "cfr_dist_params_files/figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}